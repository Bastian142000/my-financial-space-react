import Button from "../../../ui/Button";
import { useReducer } from "react";

//Initial state for reducer function
const initialState = {
  email: "test@example.cl",
  username: "",
  password: "test123",
  error: null,
  isLoading: false,
};

//Action types
const FETCH_START = "FETCH_START";
const FETCH_ERROR = "FETCH_ERROR";
const FETCH_SUCCESS = "FETCH_SUCCESS";
const HANDLE_INPUT_CHANGE = "HANDLE_INPUT_CHANGE";

//Action creators (To dispatch)
const handleInputEmail = (event) => ({
  type: "HANDLE_INPUT_CHANGE",
  field: "email",
  value: event.target.value,
});

const handleInputUsername = (event) => ({
  type: "HANDLE_INPUT_CHANGE",
  field: "username",
  value: event.target.value,
});

const handleInputPassword = (event) => ({
  type: "HANDLE_INPUT_CHANGE",
  field: "password",
  value: event.target.value,
});

const fetchStart = () => ({ type: "FETCH_START" });

const fetchSuccess = () => ({ type: "FETCH_SUCCESS" });

const fetchError = (error) => ({ type: "FETCH_ERROR", payload: error });

//Reducer function
function reducer(state, action) {
  switch (action.type) {
    case HANDLE_INPUT_CHANGE: {
      return {
        ...state,
        [action.field]: action.value,
      };
    }
    case FETCH_START: {
      return { ...state, isLoading: true, error: null };
    }
    case FETCH_SUCCESS: {
      return { ...state, isLoading: false, error: null };
    }
    case FETCH_ERROR: {
      return { ...state, isLoading: false, error: action.payload };
    }
  }
}

export default function LoginForm({ mode }) {
  const [state, dispatch] = useReducer(reducer, initialState);
  const { email, username, password, error } = state;

  function handleSubmit(e) {
    e.preventDefault();

    if (!/^[a-zA-Z0-9]*$/.test(username)) {
      dispatch(fetchError("Special characters not allowed"));
      return;
    }
  }

  return (
    <form onSubmit={handleSubmit} className="flex flex-col pt-12">
      <div className="flex flex-col items-center gap-5">
        <input
          className="w-70 rounded-2xl border border-gray-200 p-3 outline-none focus:ring-4 focus:ring-purple-100"
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => dispatch(handleInputEmail(e))}
        ></input>

        {mode === "register" && (
          <input
            className="w-70 rounded-2xl border border-gray-200 p-3 outline-none focus:ring-4 focus:ring-purple-100"
            type="text"
            placeholder="Username"
            value={username}
            onChange={(e) => dispatch(handleInputUsername(e))}
          ></input>
        )}

        <input
          className="w-70 rounded-2xl border border-gray-200 p-3 outline-none focus:ring-4 focus:ring-purple-100"
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => dispatch(handleInputPassword(e))}
        ></input>

        {error && (
          <span className="mt-1 rounded-xl border border-red-500 bg-purple-100 p-2 text-sm text-red-500">
            {error}
          </span>
        )}
      </div>

      <div className="flex py-4 text-purple-400">
        {mode === "login" && <a href="/register">Haven't registered yet?</a>}
        {mode === "register" && <a href="/">Already have an account?</a>}
      </div>

      <div>
        {mode === "register" && (
          <Button
            width={"w-45"}
            borderColor={"border-purple-300"}
            textColor={"text-purple-600"}
            hoverBgColor={"bg-purple-300"}
            hoverTextColor={"text-white"}
          >
            Register
          </Button>
        )}
        {mode === "login" && (
          <Button
            width={"w-45"}
            borderColor={"border-purple-300"}
            textColor={"text-purple-600"}
            hoverBgColor={"hover:bg-purple-300"}
            hoverTextColor={"hover:text-white"}
          >
            Login
          </Button>
        )}
      </div>
    </form>
  );
}
